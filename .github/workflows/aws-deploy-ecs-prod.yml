name: Deploy python Backend
on:
  push:
    branches:
      - main
  workflow_dispatch: #Opcional para hacer despliegues manuales

env: 
  ENVIRONMENT: prod
  ECR_REPOSITORY: ${{vars.ECR_REPOSITORY}}
  ECS_CLUSTER: ${{vars.ECS_CLUSTER}}
  ECS_TASK_DEFINITION: ${{vars.ECS_TASK_DEFINITION}}
  ECS_SERVICE: ${{vars.ECS_SERVICE}}
  CONTAINER_NAME: ${{vars.CONTAINER_NAME}}
  ACCOUNT:  ${{vars.ACCOUNT}} 

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  avoid_redundancy:
    runs-on: ubuntu-22.04
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ github.token }}

  upload_container:
    runs-on: ubuntu-22.04
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::${{env.ACCOUNT}}:role/Role_GithubActions #role-session-name: GitHub_to_AWS_via_FederatedOIDC
            aws-region: us-east-1 #Colocar la región correcta

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Configure Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR private 
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: $ECR_REPOSITORY
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ls -al
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push  $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy_to_ecs:
    needs: [upload_container]
    runs-on: ubuntu-22.04
    environment: prod #cambiar a environment correcto
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{env.ACCOUNT}}:role/Role_GithubActions
          aws-region: us-east-1

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Update & Register ECS task definition
        id: ecs-update-task-definition
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://infraestructure/task-proyecto.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "Nueva definición registrada: $NEW_TASK_DEF_ARN"
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN
          
      - name: Register scalable target
        run: |
          aws application-autoscaling register-scalable-target \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
            --min-capacity 2 \
            --max-capacity 6
      - name: Attach auto scaling policy (CPU)
        run: |
          aws application-autoscaling put-scaling-policy \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
            --policy-name cpu-auto-scale \
            --policy-type TargetTrackingScaling \
            --target-tracking-scaling-policy-configuration '{
              "TargetValue": 60.0,
              "PredefinedMetricSpecification": {
                "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
              },
              "ScaleInCooldown": 60,
              "ScaleOutCooldown": 60
            }'
